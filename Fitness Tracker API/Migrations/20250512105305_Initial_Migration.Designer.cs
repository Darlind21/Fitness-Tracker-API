// <auto-generated />
using System;
using Fitness_Tracker_API.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fitness_Tracker_API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250512105305_Initial_Migration")]
    partial class Initial_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.BodyMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("BicepsCm")
                        .HasColumnType("float");

                    b.Property<double?>("ChestCm")
                        .HasColumnType("float");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("HipsCm")
                        .HasColumnType("float");

                    b.Property<double?>("ThighsCm")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double?>("WaistCm")
                        .HasColumnType("float");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BodyMeasurements");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.DailyNutritionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DailyNutritionLogs");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.Excercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetedMuscleGroups")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeOfEquipment")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOfExcercise")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Excercises");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Calories")
                        .HasColumnType("real");

                    b.Property<float>("CarbsGrams")
                        .HasColumnType("real");

                    b.Property<float>("FatGrams")
                        .HasColumnType("real");

                    b.Property<float>("FiberGrams")
                        .HasColumnType("real");

                    b.Property<int?>("MealId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("ProteinGrams")
                        .HasColumnType("real");

                    b.Property<int>("ServingPortionInGrams")
                        .HasColumnType("int");

                    b.Property<float>("SugarGrams")
                        .HasColumnType("real");

                    b.Property<float>("SugarInCarbsGrams")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DailyNutritionLogId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DailyNutritionLogId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.WorkoutSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte?>("DurationInMinutes")
                        .HasColumnType("tinyint");

                    b.Property<int>("ExcerciseId")
                        .HasColumnType("int");

                    b.Property<byte?>("IntensityOutOfTen")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("IsWarmUpSet")
                        .HasColumnType("bit");

                    b.Property<byte?>("Reps")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("RepsInReserve")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WeightInKg")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ExcerciseId");

                    b.ToTable("WorkoutSets");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.BodyMeasurement", b =>
                {
                    b.HasOne("Fitness_Tracker_API.DataLayer.Models.User", "User")
                        .WithMany("BodyMeasurements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.DailyNutritionLog", b =>
                {
                    b.HasOne("Fitness_Tracker_API.DataLayer.Models.User", "User")
                        .WithMany("DailyNutritionLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.Excercise", b =>
                {
                    b.HasOne("Fitness_Tracker_API.DataLayer.Models.Workout", "Workout")
                        .WithMany("Excercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.Food", b =>
                {
                    b.HasOne("Fitness_Tracker_API.DataLayer.Models.Meal", null)
                        .WithMany("Foods")
                        .HasForeignKey("MealId");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.Meal", b =>
                {
                    b.HasOne("Fitness_Tracker_API.DataLayer.Models.DailyNutritionLog", "DailyNutritionLog")
                        .WithMany("Meals")
                        .HasForeignKey("DailyNutritionLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DailyNutritionLog");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.Workout", b =>
                {
                    b.HasOne("Fitness_Tracker_API.DataLayer.Models.User", "User")
                        .WithMany("Workouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.WorkoutSet", b =>
                {
                    b.HasOne("Fitness_Tracker_API.DataLayer.Models.Excercise", "Excercise")
                        .WithMany("WorkoutSets")
                        .HasForeignKey("ExcerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Excercise");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.DailyNutritionLog", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.Excercise", b =>
                {
                    b.Navigation("WorkoutSets");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.Meal", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.User", b =>
                {
                    b.Navigation("BodyMeasurements");

                    b.Navigation("DailyNutritionLogs");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("Fitness_Tracker_API.DataLayer.Models.Workout", b =>
                {
                    b.Navigation("Excercises");
                });
#pragma warning restore 612, 618
        }
    }
}
